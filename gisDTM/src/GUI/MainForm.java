/*
 * MainForm.java
 *
 * Created on Nov 22, 2011, 10:00:02 AM
 */

package GUI;

import com.marcrh.graph.Point;
import com.marcrh.graph.Range;
import com.sun.j3d.utils.universe.SimpleUniverse;
import database.Axis;
import database.GisDb;
import database.GpxReader;
import database.PointsReader;
import database.UtmGridHeightReader;
import graphics.DTMCreator;
import graphics.DTMEngine;
import graphics.DTMTriangle;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.j3d.Canvas3D;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.vecmath.Point3d;

/**
 *
 * @author giuliano
 */


public class MainForm extends javax.swing.JFrame {

    /**
     * the MainForm represents the entire application.
     * It's responsible for the business logic and owns the
     * main values.
     */
    private DTMEngine engine;
    private Canvas3D canvas;
    /**
     * the data ranges of the opened database
     */
    Double minN, minE, maxN, maxE, rangeN, rangeE;
    /**
     * the opened database. Only ONE database at a time can be opened.
     * No database is open if dataDb is null.
     */
    private GisDb dataDb = null;

    /** Creates new form MainForm */
    public MainForm() {
        canvas = new Canvas3D( SimpleUniverse.getPreferredConfiguration() );
        //inizializza la form
        initComponents();
        canvas.setBackground(Color.LIGHT_GRAY);
        contentPane.add(canvas);
        this.lblStatus.setText("Nessun database aperto.\n"+
                "Apri un database o creane uno.");
        lblStatus.update(lblStatus.getGraphics());
    }

    /**
     * Imposta il punto P(minX, minY, minZ) come origine del sistema di riferimento
     * di {@code data}
     * @param data la {@link List} della quale impostare il nuovo origine
     * @param minCoord le coordinate del centro del sistema di riferimento
     */
    private void centrePoints(List<Point3d> data, double[] minCoord, double[] maxCoord)
    {
        double dtmWidth = maxCoord[0] - minCoord[0];
        double dtmHeight = maxCoord[1] - minCoord[1];
        double dtmDepth = maxCoord[2] - minCoord[2];
        Iterator<Point3d> it = data.iterator();
        Point3d vertex;
        while (it.hasNext())
        {
            vertex = it.next();
            //centro i punti rispetto al sistema di riferimento del Canvas3D
            vertex.x = vertex.x - minCoord[0] - dtmWidth/2;
            vertex.y = vertex.y - minCoord[1] - dtmHeight/2;
            vertex.z = vertex.z - minCoord[2] - dtmDepth/2;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by 7the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btnCtrlFill = new javax.swing.ButtonGroup();
        contentPane = new javax.swing.JPanel();
        controlPane = new javax.swing.JPanel();
        btnOpenDb = new javax.swing.JButton();
        btnCreateDb = new javax.swing.JButton();
        btnLoadData = new javax.swing.JButton();
        lblStatus = new javax.swing.JTextArea();
        viewport_data = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblRangeN = new javax.swing.JLabel();
        lblRangeE = new javax.swing.JLabel();
        originN = new javax.swing.JTextField();
        originE = new javax.swing.JTextField();
        sizeN = new javax.swing.JTextField();
        sizeE = new javax.swing.JTextField();
        btnRender = new javax.swing.JButton();
        dtmViewPane = new javax.swing.JPanel();
        rbtnGrill = new javax.swing.JRadioButton();
        rbtnPolygon = new javax.swing.JRadioButton();
        btnResetView = new javax.swing.JButton();

        btnCtrlFill.clearSelection();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DTM Viewer");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusCycleRoot(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        contentPane.setMinimumSize(new java.awt.Dimension(400, 400));
        contentPane.setPreferredSize(new java.awt.Dimension(512, 512));
        contentPane.setLayout(new java.awt.BorderLayout());
        getContentPane().add(contentPane, java.awt.BorderLayout.CENTER);

        controlPane.setMinimumSize(new java.awt.Dimension(100, 300));
        controlPane.setLayout(new java.awt.GridBagLayout());

        btnOpenDb.setText("Apri database");
        btnOpenDb.setFocusable(false);
        btnOpenDb.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOpenDb.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnOpenDb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenDbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 5, 0);
        controlPane.add(btnOpenDb, gridBagConstraints);

        btnCreateDb.setText("Nuovo database");
        btnCreateDb.setFocusable(false);
        btnCreateDb.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCreateDb.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCreateDb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateDbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        controlPane.add(btnCreateDb, gridBagConstraints);

        btnLoadData.setText("Aggiungi dati da file");
        btnLoadData.setEnabled(false);
        btnLoadData.setFocusable(false);
        btnLoadData.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLoadData.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLoadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadDataActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        controlPane.add(btnLoadData, gridBagConstraints);

        lblStatus.setColumns(20);
        lblStatus.setEditable(false);
        lblStatus.setLineWrap(true);
        lblStatus.setRows(5);
        lblStatus.setText("Stato del programma");
        lblStatus.setWrapStyleWord(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridheight = 2;
        controlPane.add(lblStatus, gridBagConstraints);

        viewport_data.setBorder(javax.swing.BorderFactory.createTitledBorder("Viewport"));
        viewport_data.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("N Origin: ");
        viewport_data.add(jLabel1, new java.awt.GridBagConstraints());

        jLabel2.setText("E Origin: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        viewport_data.add(jLabel2, gridBagConstraints);

        jLabel3.setText("N Size: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        viewport_data.add(jLabel3, gridBagConstraints);

        jLabel4.setText("E Size:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        viewport_data.add(jLabel4, gridBagConstraints);

        jLabel5.setText("N:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        viewport_data.add(jLabel5, gridBagConstraints);

        jLabel6.setText("E:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        viewport_data.add(jLabel6, gridBagConstraints);

        lblRangeN.setText("Range of N coords");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        viewport_data.add(lblRangeN, gridBagConstraints);

        lblRangeE.setText("Range of E coords");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        viewport_data.add(lblRangeE, gridBagConstraints);

        originN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                originNActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        viewport_data.add(originN, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        viewport_data.add(originE, gridBagConstraints);

        sizeN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeNActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        viewport_data.add(sizeN, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        viewport_data.add(sizeE, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        controlPane.add(viewport_data, gridBagConstraints);

        btnRender.setText("Render");
        btnRender.setEnabled(false);
        btnRender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRenderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        controlPane.add(btnRender, gridBagConstraints);

        dtmViewPane.setLayout(new java.awt.GridBagLayout());

        btnCtrlFill.add(rbtnGrill);
        rbtnGrill.setText("Vista Griglia");
        rbtnGrill.setEnabled(false);
        rbtnGrill.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnGrillItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 8, 0);
        dtmViewPane.add(rbtnGrill, gridBagConstraints);

        btnCtrlFill.add(rbtnPolygon);
        rbtnPolygon.setText("Vista Terreno");
        rbtnPolygon.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(3, 7, 8, 0);
        dtmViewPane.add(rbtnPolygon, gridBagConstraints);

        btnResetView.setText("Reimposta vista");
        btnResetView.setEnabled(false);
        btnResetView.setMaximumSize(new java.awt.Dimension(100, 30));
        btnResetView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetViewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.insets = new java.awt.Insets(3, 17, 3, 17);
        dtmViewPane.add(btnResetView, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.8;
        gridBagConstraints.weighty = 2.0;
        controlPane.add(dtmViewPane, gridBagConstraints);

        getContentPane().add(controlPane, java.awt.BorderLayout.LINE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Event handler on "open database" button click.
     * @param evt
     */
    private void btnOpenDbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenDbActionPerformed
        //Open a file chooser window that can open only .db files
        //A default directory can be apssed to the JFileChooser constructor
        JFileChooser chooser = new JFileChooser("examples");
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "Points database", "db");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        //do nothing if the user press cancel
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                //If the user selected a DB then open it
                dataDb=new GisDb(chooser.getSelectedFile().getAbsolutePath());
                lblStatus.setText("Aperto "+dataDb.getName());
                //enable the "load data" button
                btnLoadData.setEnabled(true);
                btnRender.setEnabled(true);
                //calculate data range
                minN=dataDb.getMin(Axis.Northing);
                minE=dataDb.getMin(Axis.Easting);
                maxN=dataDb.getMax(Axis.Northing);
                maxE=dataDb.getMax(Axis.Easting);
                rangeN=maxN-minN;
                rangeE=maxE-minE;
                lblRangeN.setText(minN+"-"+maxN);
                lblRangeE.setText(minE+"-"+maxE);
                //default values for the viewport
                //origin=upper-left corner
                originN.setText(minN.toString());
                originE.setText(minE.toString());
                //size=covers all the data
                sizeN.setText(rangeN.toString());
                sizeE.setText(rangeE.toString());

            } catch (IllegalArgumentException ex) {
                lblStatus.setText("Nome file non valido.")   ;
            } catch (Exception ex) {
                lblStatus.setText("Impossibile aprire il DB specificato.");
            }
        }
    }//GEN-LAST:event_btnOpenDbActionPerformed

    private void btnCreateDbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateDbActionPerformed
        //Open a file chooser window that can SAVE only .db files
        JFileChooser chooser = new JFileChooser("examples");
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "Points database", "db");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showSaveDialog(this);
        //do nothing if the user press cancel
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                //If the user selected a name then CREATE and OPEN the DB

                //check extension. must be .db
                String name=chooser.getSelectedFile().getAbsolutePath();
                if(!name.endsWith(".db")) name+=".db";

                dataDb=new GisDb(name);
                lblStatus.setText("Creato e aperto "+dataDb.getName());
                btnLoadData.setEnabled(true);
                btnRender.setEnabled(true);
            } catch (IllegalArgumentException ex) {
                lblStatus.setText("Nome file non valido.")   ;
            } catch (Exception ex) {
                lblStatus.setText("Impossibile creare il DB specificato.");
            }
        }
    }//GEN-LAST:event_btnCreateDbActionPerformed

    /**
     * Apre una finestra per scegliere il file dati da importare nel DB
     * e seleziona il tipo di file
     * @param evt
     */
    private void btnLoadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadDataActionPerformed

        PointsReader dataReader=null;

        LinkedList<Point3d> tuttiPunti=null;

        //Open a file chooser window that can open data files
        JFileChooser chooser = new JFileChooser("examples");

        //create the file-type filters
        FileNameExtensionFilter filtergrid = new FileNameExtensionFilter(
            "WGS-84 UTM grid files (.xyz)", "xyz");
        FileNameExtensionFilter filtergpx = new FileNameExtensionFilter(
                "GPX logs (.gpx)", "gpx");
        chooser.addChoosableFileFilter(filtergrid);
        chooser.addChoosableFileFilter(filtergpx);

        //open the dialog
        int returnVal = chooser.showOpenDialog(this);

        //do nothing if the user press cancel
        if(returnVal == JFileChooser.APPROVE_OPTION) {
                try {
                    String name=chooser.getSelectedFile().getAbsolutePath();

                    //choose the right reader based on the file extension
                    if(name.endsWith(".gpx")){
                        //it's a GPX file
                        dataReader=new GpxReader();
                    }else if(name.endsWith(".xyz")){
                        //it's a grid file
                        dataReader=new UtmGridHeightReader();
                    }else{
                        throw new IllegalArgumentException("Tipo file non supportato.");
                    }

                    //now tell the reader what file to read
                    dataReader.setSource(name);

                } catch (Exception ex) {
                    lblStatus.setText("Impossibile aprire il file dati specificato.");
                }

                try {
                    //Il file è aperto, ora parsiamolo e importiamo i dati nel database
                    tuttiPunti=dataReader.getAllPoints();
                } catch (Exception ex) {
                    lblStatus.setText("Errore nel parsing del file dati");
                }

                lblStatus.setText("Inserimento punti nel DB, attendere.");
                this.setCursor(Cursor.WAIT_CURSOR);
                try {
                    dataDb.addPoints(tuttiPunti,dataReader.getNullValue());
                } catch (SQLException ex) {
                    lblStatus.setText("Errore inserimento dei punti nel DB");
                }
                this.setCursor(Cursor.DEFAULT_CURSOR);
                lblStatus.setText("Punti correttamente aggiunti al db.");
           try{
                //calculate data range
                minN=dataDb.getMin(Axis.Northing);
                minE=dataDb.getMin(Axis.Easting);
                maxN=dataDb.getMax(Axis.Northing);
                maxE=dataDb.getMax(Axis.Easting);
                lblRangeN.setText(minN+"-"+maxN);
                lblRangeE.setText(minE+"-"+maxE);
                rangeN=maxN-minN;
                rangeE=maxE-minE;

                //default values for the viewport
                //origin=upper-left corner
                originN.setText(minN.toString());
                originE.setText(minE.toString());
                //size=covers all the data
                sizeN.setText(rangeN.toString());
                sizeE.setText(rangeE.toString());
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnLoadDataActionPerformed

    private void originNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_originNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_originNActionPerformed

    private void sizeNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sizeNActionPerformed

    /**
     * Questo metodo viene chiamato dal pulsante "Render"
     * ed esegue dei controlli preliminari sui dati del viewport prima di chiamare
     * DTMCreator e DTMEngine
     * @param evt
     */
    private void btnRenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRenderActionPerformed
        LinkedList<DTMTriangle> res;

        /**
         * Quanti punti ci sono nella regione richiesta
         */
        Integer count;
        //controlli basilari su origine e dimensione della finestra dati
        Double minN,minE,widthN,widthE,maxN,maxE;
        btnResetView.setEnabled(false);
        rbtnPolygon.setEnabled(false);
        rbtnGrill.setEnabled(false);
        Cursor cursor = Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR);
        this.setCursor(cursor);
        canvas.setCursor(cursor);
        //string to double
        try{
            minN=Double.valueOf(originN.getText());
            minE=Double.valueOf(originE.getText());
            widthN=Double.valueOf(sizeN.getText());
            widthE=Double.valueOf(sizeE.getText());
            maxN=minN+widthN;
            maxE=minE+widthE;
        }catch(NumberFormatException nfe){
           lblStatus.setText("Non sono ammessi campi vuoti");
           lblStatus.update(lblStatus.getGraphics());
           return;
        }
        //no coordinate negative
        if(minN < 0 || minE < 0 || widthN < 0 || widthE < 0){
            String err="No coordinate negative!";
            lblStatus.setText(err);
            lblStatus.update(lblStatus.getGraphics());
            return;
        }

        //il rettangolo copre più dei dati disponibili
        if(maxN > maxN){
            String err="Origine + dimensione lungo la coordinata N non può essere"
                    + " maggiore di "+maxN;
            lblStatus.setText(err);
            lblStatus.update(lblStatus.getGraphics());
            return;
        }

        if(maxE > maxE){
            String err="Origine + dimensione lungo la coordinata E non può essere"
                    + " maggiore di "+maxE;
            lblStatus.setText(err);
            lblStatus.update(lblStatus.getGraphics());

            return;
        }
        if(engine != null)
        {
            engine.removeDTM();
        }
        //da qui in poi possono essere stampati diversi messaggi
        //quindi appendiamo il testo e non lo settiamo nella label.
        lblStatus.setText("");

        //ask gisDb how many points are there in this rectangle
       lblStatus.append("Numero di punti nella regione richiesta:");
       lblStatus.update(lblStatus.getGraphics());

       try{
           count=dataDb.countPoints(minN,minE,maxN,maxE);
           lblStatus.append(count.toString()+"\n");
           lblStatus.update(lblStatus.getGraphics());

       }catch(SQLException e){
           System.out.println("Impossibile calcolare il numero di punti");
       }

        //data is ok
        //call the triangulation
        lblStatus.append("Triangulation in progress...");
        lblStatus.update(lblStatus.getGraphics());
        try{
            //Delaunay class requires a "range" given in terms of
            //top-left point and bottom-right point
            double pE,pN;
            pE=dataDb.getMaxPerturb(Axis.Easting);
            pN=dataDb.getMaxPerturb(Axis.Northing);

            //il range è più grande dei dati a causa della perturbazione
            Point topleft = new Point(minE, maxN + pN);
            Point bottomright = new Point(maxE + pE, minN);
            Range r = new Range(topleft, bottomright);
            double[] minCoord = {minE, minN, dataDb.getMin(Axis.Height)};
            double[] maxCoord = {maxE, maxN, dataDb.getMax(Axis.Height)};
            LinkedList<Point3d> data;
            data = dataDb.getPoints(minN, minE, maxN, maxE);
            //imposto coordinate relative al centro del Canvas3D
            centrePoints(data, minCoord, maxCoord);
            res = DTMCreator.PerturbDelaunay(data, r, pN, pE);
            lblStatus.append("Triangulation terminated");
            lblStatus.update(lblStatus.getGraphics());

            //res=DTMCreator.Delaunay(dataDb.getPoints(minN, minE, maxN, maxE),r);
            lblStatus.append("\nRendering in progress...");
            lblStatus.update(lblStatus.getGraphics());
            //se è stato premuto per la prima volta il bottone
            if(engine == null)
            {
                //creo il nuovo engine
                engine = new DTMEngine(canvas, res, dataDb.getName(), maxCoord, minCoord);
                //e il DTM con le sue belle forme
                engine.createDTM();
            }
            else
            {   //nel caso fosse stato già premuto il bottone basta ricreare un
                //nuovo DTM dal motore già esistente
                engine.addDTM(res, dataDb.getName());
            }
            //costruisco la scena
            engine.createDTMScene();
            //la renderizzo
            engine.renderScene(dataDb.getName());
            //
            if(canvas.getMouseWheelListeners() == null || canvas.getMouseWheelListeners().length == 0 )
            {
                canvas.addMouseWheelListener(new MouseWheelListener() {

                    @Override
                    public void mouseWheelMoved(MouseWheelEvent e)
                    {
                        engine.setMouseMovementFactor(e.getUnitsToScroll());
                    }
                });
            }
        }catch(Exception e){
            lblStatus.append("\nImpossibile calcolare la triangolazione dei punti. Motivazione:");
            lblStatus.append(e.toString());
            lblStatus.update(lblStatus.getGraphics());
            System.exit(10);
        }
        lblStatus.append("Render OK");
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        canvas.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        btnResetView.setEnabled(true);
        rbtnPolygon.setEnabled(true);
        rbtnPolygon.setSelected(true);
        rbtnGrill.setEnabled(true);
    }//GEN-LAST:event_btnRenderActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        //nel caso si chiudesse la finestra prima della fine del render
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_formWindowClosing

    private void btnResetViewActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnResetViewActionPerformed
    {//GEN-HEADEREND:event_btnResetViewActionPerformed
        if(engine == null) throw new NullPointerException("Engine is null");
        engine.createDTMScene();
    }//GEN-LAST:event_btnResetViewActionPerformed

    private void rbtnGrillItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_rbtnGrillItemStateChanged
    {//GEN-HEADEREND:event_rbtnGrillItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED)
        {
            engine.setGrillView();
        }
        else
        {
            engine.setFillView();
        }
    }//GEN-LAST:event_rbtnGrillItemStateChanged


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
String path = System.getProperty("java.library.path");
System.out.println(path);


        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                MainForm mf = new MainForm();
                mf.setSize(Toolkit.getDefaultToolkit().getScreenSize());
                mf.setMaximumSize(Toolkit.getDefaultToolkit().getScreenSize());
                mf.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateDb;
    private javax.swing.ButtonGroup btnCtrlFill;
    private javax.swing.JButton btnLoadData;
    private javax.swing.JButton btnOpenDb;
    private javax.swing.JButton btnRender;
    private javax.swing.JButton btnResetView;
    private javax.swing.JPanel contentPane;
    private javax.swing.JPanel controlPane;
    private javax.swing.JPanel dtmViewPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lblRangeE;
    private javax.swing.JLabel lblRangeN;
    private javax.swing.JTextArea lblStatus;
    private javax.swing.JTextField originE;
    private javax.swing.JTextField originN;
    private javax.swing.JRadioButton rbtnGrill;
    private javax.swing.JRadioButton rbtnPolygon;
    private javax.swing.JTextField sizeE;
    private javax.swing.JTextField sizeN;
    private javax.swing.JPanel viewport_data;
    // End of variables declaration//GEN-END:variables


}
